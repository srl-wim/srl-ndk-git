/*
Package ndk-git is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /Users/henderiw/CodeProjects/go/pkg/mod/github.com/openconfig/ygot@v0.8.3/genutil/names.go
using the following YANG input files:
	- ../yang/ndk-git-types.yang
	- ../yang/ndk-git.yang
Imported modules were sourced from:
	- ../../../../goysrl/yang/...
*/
package ndk-git

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)


// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: nil,
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}


// Validate validates s against the YANG schema corresponding to its type.
func (t *Git_Git) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Git_Git"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Git_Git) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Validate validates s against the YANG schema corresponding to its type.
func (t *Git_Git_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Git_Git_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Git_Git_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NewInterface creates a new entry in the Interface list of the
// SrlNokiaNetworkInstance_NetworkInstance struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance) NewInterface(Name string) (*SrlNokiaNetworkInstance_NetworkInstance_Interface, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &SrlNokiaNetworkInstance_NetworkInstance_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacDuplication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLearning_Aging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_BridgeTable_MacLimit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Icmp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NewType creates a new entry in the Type list of the
// SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics) NewType(Name E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name) (*SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Type == nil {
		t.Type = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type_Name]*SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Type[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Type", key)
	}

	t.Type[key] = &SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type{
		Name: Name,
	}

	return t.Type[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Total) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Total"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Total) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp6_Statistics_Type) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NewType creates a new entry in the Type list of the
// SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics) NewType(Name E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name) (*SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Type == nil {
		t.Type = make(map[E_SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type_Name]*SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Type[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Type", key)
	}

	t.Type[key] = &SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type{
		Name: Name,
	}

	return t.Type[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Total) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Total"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Total) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Icmp_Statistics_Type) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_Interface struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_IpForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpForwarding) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// NewResilientHashPrefix creates a new entry in the ResilientHashPrefix list of the
// SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing struct. The keys of the list are populated from the input
// arguments.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) NewResilientHashPrefix(IpPrefix string) (*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ResilientHashPrefix == nil {
		t.ResilientHashPrefix = make(map[string]*SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ResilientHashPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ResilientHashPrefix", key)
	}

	t.ResilientHashPrefix[key] = &SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix{
		IpPrefix: &IpPrefix,
	}

	return t.ResilientHashPrefix[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// ΛListKeyMap returns the keys of the SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix struct, which is a YANG list entry.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_IpLoadBalancing_ResilientHashPrefix) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_Protocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_Protocols) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// Validate validates s against the YANG schema corresponding to its type.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["SrlNokiaNetworkInstance_NetworkInstance_RouteTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *SrlNokiaNetworkInstance_NetworkInstance_RouteTable) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


